name: ' Publish To Environment'

on:
  workflow_dispatch:
    inputs:
      appVersion:
        description: App version to deploy to environment(s) (current, prerelease, draft, latest or version number)
        required: false
        default: 'current'
      environmentName:
        description: Environment mask to receive the new version (* for all, PROD* for all environments starting with PROD)
        required: true

permissions:
  contents: read
  actions: read

defaults:
  run:
    shell: powershell

env:
  ALGoOrgSettings: ${{ vars.ALGoOrgSettings }}
  ALGoRepoSettings: ${{ vars.ALGoRepoSettings }}

jobs:
  Initialization:
    runs-on: [ windows-latest ]
    outputs:
      telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
      environments: ${{ steps.ReadSettings.outputs.EnvironmentsJson }}
      environmentCount: ${{ steps.ReadSettings.outputs.EnvironmentCount }}
      unknownEnvironment: ${{ steps.ReadSettings.outputs.UnknownEnvironment }}
      deviceCode: ${{ steps.Authenticate.outputs.deviceCode }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialize the workflow
        id: init
        uses: microsoft/AL-Go/Actions/WorkflowInitialize@f3d69d507d017100a262efb5bd856a7b667a2b19
        with:
          shell: powershell
          eventId: "DO0097"

      - name: Read settings
        id: ReadSettings
        uses: microsoft/AL-Go/Actions/ReadSettings@f3d69d507d017100a262efb5bd856a7b667a2b19
        with:
          shell: powershell
          parentTelemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
          getEnvironments: ${{ github.event.inputs.environmentName }}
          includeProduction: 'Y'

      - name: EnvName
        id: envName
        if: steps.ReadSettings.outputs.UnknownEnvironment == 1
        run: |
          $errorActionPreference = "Stop"; $ProgressPreference = "SilentlyContinue"; Set-StrictMode -Version 2.0
          $envName = '${{ fromJson(steps.ReadSettings.outputs.environmentsJson).matrix.include[0].environment }}'.split(' ')[0]
          Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "envName=$envName"

      - name: Read secrets
        uses: microsoft/AL-Go/Actions/ReadSecrets@f3d69d507d017100a262efb5bd856a7b667a2b19
        if: steps.ReadSettings.outputs.UnknownEnvironment == 1
        with:
          shell: powershell
          parentTelemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
          gitHubSecrets: ${{ toJson(secrets) }}
          getSecrets: '${{ steps.envName.outputs.envName }}-AuthContext,${{ steps.envName.outputs.envName }}_AuthContext,AuthContext'

      - name: Authenticate
        id: Authenticate
        if: steps.ReadSettings.outputs.UnknownEnvironment == 1
        run: |
          $envName = '${{ steps.envName.outputs.envName }}'
          $secretName = ''
          $secrets = $env:Secrets | ConvertFrom-Json
          $authContext = $null
          "$($envName)-AuthContext", "$($envName)_AuthContext", "AuthContext" | ForEach-Object {
            if (!($authContext)) {
              if ($secrets."$_") {
                Write-Host "Using $_ secret as AuthContext"
                $authContext = $secrets."$_"
                $secretName = $_
              }
            }
          }
          if ($authContext) {
            Write-Host "AuthContext provided in secret $secretName!"
            Set-Content -Path $ENV:GITHUB_STEP_SUMMARY -value "AuthContext was provided in a secret called $secretName. Using this information for authentication."
          }
          else {
            Write-Host "No AuthContext provided for $envName, initiating Device Code flow"
            $ALGoHelperPath = "$([System.IO.Path]::GetTempFileName()).ps1"
            $webClient = New-Object System.Net.WebClient
            $webClient.DownloadFile('https://raw.githubusercontent.com/microsoft/AL-Go/f3d69d507d017100a262efb5bd856a7b667a2b19/Actions/AL-Go-Helper.ps1', $ALGoHelperPath)
            . $ALGoHelperPath
            $BcContainerHelperPath = DownloadAndImportBcContainerHelper -baseFolder $ENV:GITHUB_WORKSPACE
            $authContext = New-BcAuthContext -includeDeviceLogin -deviceLoginTimeout ([TimeSpan]::FromSeconds(0))
            CleanupAfterBcContainerHelper -bcContainerHelperPath $bcContainerHelperPath
            Set-Content -Path $ENV:GITHUB_STEP_SUMMARY -value "AL-Go needs access to the Business Central Environment $('${{ steps.envName.outputs.envName }}'.Split(' ')[0]) and could not locate a secret called ${{ steps.envName.outputs.envName }}_AuthContext`n`n$($authContext.message)"
            Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "deviceCode=$($authContext.deviceCode)"
          }

  Deploy:
    needs: [ Initialization ]
    if: needs.Initialization.outputs.environmentCount > 0
    strategy: ${{ fromJson(needs.Initialization.outputs.environments) }}
    runs-on: ${{ fromJson(matrix.os) }}
    name: Deploy to ${{ matrix.environment }}
    environment:
      name: ${{ matrix.environment }}
    env:
      deviceCode: ${{ needs.Initialization.outputs.deviceCode }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: EnvName
        id: envName
        run: |
          $errorActionPreference = "Stop"; $ProgressPreference = "SilentlyContinue"; Set-StrictMode -Version 2.0
          $envName = '${{ matrix.environment }}'.split(' ')[0]
          Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "envName=$envName"

      - name: Read settings
        uses: microsoft/AL-Go/Actions/ReadSettings@f3d69d507d017100a262efb5bd856a7b667a2b19
        with:
          shell: powershell

      - name: Read secrets
        uses: microsoft/AL-Go/Actions/ReadSecrets@f3d69d507d017100a262efb5bd856a7b667a2b19
        with:
          shell: powershell
          gitHubSecrets: ${{ toJson(secrets) }}
          secrets: '${{ steps.envName.outputs.envName }}-AuthContext,${{ steps.envName.outputs.envName }}_AuthContext,AuthContext,${{ steps.envName.outputs.envName }}-EnvironmentName,${{ steps.envName.outputs.envName }}_EnvironmentName,EnvironmentName,projects'

      - name: AuthContext
        id: authContext
        run: |
          $errorActionPreference = "Stop"; $ProgressPreference = "SilentlyContinue"; Set-StrictMode -Version 2.0
          $settings = $env:Settings | ConvertFrom-Json
          $envName = '${{ steps.envName.outputs.envName }}'
          $settingsName = "DeployTo$envName"
          if ($settings.PSObject.Properties.name -eq $settingsName) {
            $deployToSetting = $settings."$settingsName" | ConvertFrom-Json
          }
          else {
            $deployToSetting = [PSCustomObject]@{}
          }
          $secrets = $env:Secrets | ConvertFrom-Json
          $authContext = $null
          "$($envName)-AuthContext", "$($envName)_AuthContext", "AuthContext" | ForEach-Object {
            if (!($authContext)) {
              if ($secrets."$_") {
                Write-Host "Using $_ secret as AuthContext"
                $authContext = $secrets."$_"
              }
            }            
          }
          if (!($authContext)) {
            Write-Host "::Error::No AuthContext provided"
            exit 1
          }
          if (("$deployToSetting" -ne "") -and $deployToSetting.PSObject.Properties.name -eq "EnvironmentName") {
            $environmentName = $deployToSetting.EnvironmentName
          }
          else {
            $environmentName = $null
            "$($envName)-EnvironmentName", "$($envName)_EnvironmentName", "EnvironmentName" | ForEach-Object {
              if (!($EnvironmentName)) {
                if ($secrets."$_") {
                  Write-Host "Using $_ secret as EnvironmentName"
                  Write-Host "::Warning::Please consider using the $settingsName setting, where you can specify EnvironmentName, projects and branches - instead of specifying the EnvironmentName in a Secret."
                  $EnvironmentName = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($secrets."$_"))
                }
              }            
            }
          }
          if (!($environmentName)) {
            $environmentName = '${{ steps.envName.outputs.envName }}'
          }
          $environmentName = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(($environmentName + '${{ matrix.environment }}'.SubString($envName.Length)).ToUpperInvariant()))

          $projects = ''
          if (("$deployToSetting" -ne "") -and $deployToSetting.PSObject.Properties.name -eq "projects") {
            $projects = $deployToSetting.projects
          }
          elseif ($settings.PSObject.Properties.name -eq "$($envName)-projects") {
            $projects = $settings."$($envName)-projects"
            Write-Host "::Warning::Please consider using the $settingsName setting, where you can specify EnvironmentName, projects and branches - instead of specifying the Projects in Setting '$($envName)-projects'"
          }
          elseif ($settings.PSObject.Properties.name -eq "$($envName)_projects") {
            $projects = $settings."$($envName)_projects"
            Write-Host "::Warning::Please consider using the $settingsName setting, where you can specify EnvironmentName, projects and branches - instead of specifying the Projects in Setting '$($envName)_projects'"
          }
          elseif ($secrets.projects) {
            $projects = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($secrets.projects))
            Write-Host "::Warning::Please consider using the $settingsName setting, where you can specify EnvironmentName, projects and branches - instead of specifying the Projects in the secret 'project'"
          }
          if ($projects -eq '' -or $projects -eq '*') {
            $projects = '*'
          }
          else {
            $buildProjects = '${{ needs.Initialization.outputs.projects }}' | ConvertFrom-Json
            $projects = ($projects.Split(',') | Where-Object { $buildProjects -contains $_ }) -join ','
          }

          Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "authContext=$authContext"
          Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "environmentName=$environmentName"
          Write-Host "environmentName=$([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($environmentName)))"
          Write-Host "environmentName (as Base64)=$environmentName"
          Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "projects=$projects"
          Write-Host "projects=$projects"

      - name: Deploy
        uses: microsoft/AL-Go/Actions/Deploy@f3d69d507d017100a262efb5bd856a7b667a2b19
        env:
          AuthContext: ${{ steps.authContext.outputs.authContext }}
        with:
          shell: powershell
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          type: 'Publish'
          projects: ${{ steps.authContext.outputs.projects }}
          environmentName: ${{ steps.authContext.outputs.environmentName }}
          artifacts: ${{ github.event.inputs.appVersion }}

  PostProcess:
    if: always()
    runs-on: [ windows-latest ]
    needs: [ Initialization, Deploy ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Finalize the workflow
        id: PostProcess
        uses: microsoft/AL-Go/Actions/WorkflowPostProcess@f3d69d507d017100a262efb5bd856a7b667a2b19
        with:
          shell: powershell
          eventId: "DO0097"
          telemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
